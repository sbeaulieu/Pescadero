this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
#  if (length<10) initially used 10 min but then Scott told us about several minute lag for mass spec
start<-ymd_hms(chem_end)-minutes(20) #sets temp_start to 15min before the end of chemical measurements if chemistry taken for 15 minutes or more
if (length<20)
print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
temp_duration<-function(x,y,z){ #same input as chem_measure() and temp_duration()
all_ISS<-read.csv(x) #through defining chem_end, identical to chem_measure() and temp_start(); originally these 3 were one function, but were separated to avoid defining variables globally within the function
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text)
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text)
interval<-interval(chem_start,chem_end)
length<-time_length(interval,unit="minutes")
if (length<10)
duration<-length #sets duration to entirety of chemical measurement if chemistry taken for less than 10 minutes
else
duration<-10 #sets duration to 10 minutes if more than 10 minutes of chemistry taken
}
TempStats_times<-function(x,t,d){  #variation of TempStats() function in PescStats that outputs just the times that TempStats() uses
ISS<-read.csv(x) #x is actual temperature log
ISS$time<-ymd_hms(ISS$time) #assumes timestamps in "time" column are in year month day hour minute second format; from lubridate package
start<-ymd_hms(t) #t is the desired start time for temperature
end<-ymd_hms(start)+minutes(d) #d is the durration of the measurement
ISS_period<-subset(ISS, time>start & time<end) #assigns ISS_period globally so it can be used outside of the function
start2<-paste(start) #have to paste start and end because otherwise, the data will be converted to the timezone of the machine when printed, or it will print a string of numbers that is, presumably, a representation of the time value rather than the actual value; something to do with lubridate maybe
end2<-paste(end)
t_timeframe<-c(start2,end2) #stores start and end time of temperature data analyzed)
}
#creating a separate function to avoid using <<- or assign()
ISS_period<-function(x,t,d){ #same input as TempStats_times(), creates subset of temperature data for the appropriate times
ISS<-read.csv(x) #same as part of TempStats_times(), separated to avoid globally defining ISS_period w/in it
ISS$time<-ymd_hms(ISS$time)
start<-ymd_hms(t)
end<-ymd_hms(start)+minutes(d)
ISS_period<-subset(ISS, time>start & time<end)
}
ISS_Stats<-function(c,t,s){ #x is variable for whole ISS, c is variable for chemistry times, t is variable for temp times, s is for sum_stats
x<-paste(t) #pastes temperature times because lubridate(?) is still doing *something* funky with times
y<-paste(c)
x<-c(y,x,s) #creates vector of data for a given site, in this order: chemical data start, chemical data end, temp data start, temp data end, mean, median, range, variance, st. dev, SEM
}
chemical_times_csv<-"Pescadero_Chemical_Timestamps_31May2018_modified.csv"
#column headers have been renamed from initial file sent by Scott to remove spaces
#additional columns have been added to put chemical times in format recognized by lubridate
#rows wh ere chemical start/end times have been manually removed from this spreadsheet; they caused issues with chem_measure
#temp_start is created for each location by chem_measure() based on the starting chemical time in chemical_times_csv
#duration is created for each location by chem_measure() based on the length of chemical measurements in chemical_times_csv, default is 10min
ISS001<-"temp_log_001.csv"
ISS002<-"temp_log_002.csv"
ISS003<-"temp_log_003.csv"
ISS004<-"temp_log_004.csv"
ISS005<-"temp_log_005.csv"
ISS006<-"temp_log_006.csv"
ISS007<-"temp_log_007.csv"
#Bullseye
chem_time<-chem_measure(chemical_times_csv,1,"bullseye") #print chem start and end times; chemical_times_csv defined in {r variables called often}
start<-temp_start(chemical_times_csv,1,"bullseye") #isolate chemical start time, save as variable "start"
duration<-temp_duration(chemical_times_csv,1,"bullseye") #isolate chemical duration, save as variable "duration"
t_timeframe<-TempStats_times(ISS001,start,duration) #get temp start and end times
ISS_duration<-ISS_period(ISS001,start,duration) #subsets station data into table for just this time period
ISS_summary<-sum_stats_values(ISS_duration$temperature) #get summary statistics
temp_start<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
#  if (length<10) initially used 10 min but then Scott told us about several minute lag for mass spec
start<-ymd_hms(chem_end)-minutes(20) #sets temp_start to 15min before the end of chemical measurements if chemistry taken for 15 minutes or more
if (length<20)
print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
#Bullseye
chem_time<-chem_measure(chemical_times_csv,1,"bullseye") #print chem start and end times; chemical_times_csv defined in {r variables called often}
start<-temp_start(chemical_times_csv,1,"bullseye") #isolate chemical start time, save as variable "start"
duration<-temp_duration(chemical_times_csv,1,"bullseye") #isolate chemical duration, save as variable "duration"
t_timeframe<-TempStats_times(ISS001,start,duration) #get temp start and end times
ISS_duration<-ISS_period(ISS001,start,duration) #subsets station data into table for just this time period
ISS_summary<-sum_stats_values(ISS_duration$temperature) #get summary statistics
#Bullseye
chem_time<-chem_measure(chemical_times_csv,2,"bullseye")
start<-temp_start(chemical_times_csv,2,"bullseye")
duration<-temp_duration(chemical_times_csv,2,"bullseye")
t_timeframe<-TempStats_times(ISS002,start,duration)
ISS_duration<-ISS_period(ISS002,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
TempStats(ISS002,start,duration,"ISS002 Bullseye", "scatterplot")
ISS_summary<-sum_stats_values(ISS_duration$temperature)
head(ISS_duration)
test_chem_duration<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
if (length<20)
print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
temp_start<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
#  if (length<10) initially used 10 min but then Scott told us about several minute lag for mass spec
start<-ymd_hms(chem_end)-minutes(20) #sets temp_start to 15min before the end of chemical measurements if chemistry taken for 15 minutes or more
#if (length<20)
# print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
sum_stats_values<-function(x){   #variation of sum_stats() function in PescStats to return JUST the summary statistic values indicated below; original sum_stats() function prints these values with labels in the R console
decimal<-strsplit(as.character(x),"\\.")[[1]][2]
if(is.na(decimal))
digits <- 1 #sets up for rounding to 1 decimal place if original data is whole numbers
else
digits<-nchar(decimal)+1 #sets up for rounding to 1 more decimal place than in original data
min<-round(min(x, na.rm=T), digits=digits)
max<-round(max(x, na.rm=T), digits=digits)
mean<-round(mean(x, na.rm=T), digits=digits) #calculates mean of data, with NAs removed and rounding
med<-round(median(x, na.rm=T), digits=digits) #calculates median of data, with NAs removed and rounding
range<-round(max(x, na.rm=T)-min(x, na.rm=T), digits=digits) #calculates range of data, with NAs removed and rounding
var<-round(var(x, na.rm=T), digits=digits) #calculates variance of data, with NAs removed and rounding
sd<-round(sd(x, na.rm=T), digits=digits) #calculates standard devation of data, with NAs removed and rounding
SEM<-round(SEM(x),digits=digits) #calculates standard error of the mean of data, with NAs removed and roundign
ISS_summary<-c(max,min,mean,med,range,var,sd,SEM) #stores summary statistics
}
chem_measure<-function(x,y,z){ #catered to pulling chem data times from various versions of the same spreadsheet
all_ISS<-read.csv(x) #x is file name of this iteration of the sheet
this_ISS<-subset(all_ISS, all_ISS$Station==y) #y is station number (00#); subsets just the measurements from that station
this_locale<-subset(this_ISS,this_ISS$location==z) #z is location (bullseye, away, excavated_bullseye); subsets
start2<-as.character(this_locale$Chem_Data_Start_Text) #if not stored as character, when concatinating summary stats, temperature times, and chemical times together later, the chemical times are either appended or prefixed to every other variable rather than standing alone
end2<-as.character(this_locale$Chem_Data_End_Text)
chem_time<-c(start2,end2)
}
#making temp_start and duration separate functions to avoid using <<- or assign()
temp_start<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
#  if (length<10) initially used 10 min but then Scott told us about several minute lag for mass spec
start<-ymd_hms(chem_end)-minutes(20) #sets temp_start to 15min before the end of chemical measurements if chemistry taken for 15 minutes or more
#if (length<20)
# print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
#return warning if chemistry taken for less than 20 in
test_chem_duration<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
if (length<20)
print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
#temp now always 10 min, so this function is unncessary
#temp_duration<-function(x,y,z){ #same input as chem_measure() and temp_duration()
#  all_ISS<-read.csv(x) #through defining chem_end, identical to chem_measure() and temp_start(); originally these 3 were one function, but were separated to avoid defining variables globally within the function
#  this_ISS<-subset(all_ISS, all_ISS$Station==y)
#  this_locale<-subset(this_ISS,this_ISS$location==z)
#  chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text)
#  chem_end<-ymd_hms(this_locale$Chem_Data_End_Text)
#  interval<-interval(chem_start,chem_end)
#  length<-time_length(interval,unit="minutes")
#    if (length<10)
#      duration<-length #sets duration to entirety of chemical measurement if chemistry taken for less than 10 minutes
#    else
#      duration<-10 #sets duration to 10 minutes if more than 10 minutes of chemistry taken
#}
TempStats_times<-function(x,t,d){  #variation of TempStats() function in PescStats that outputs just the times that TempStats() uses
ISS<-read.csv(x) #x is actual temperature log
ISS$time<-ymd_hms(ISS$time) #assumes timestamps in "time" column are in year month day hour minute second format; from lubridate package
start<-ymd_hms(t) #t is the desired start time for temperature
end<-ymd_hms(start)+minutes(d) #d is the durration of the measurement
ISS_period<-subset(ISS, time>start & time<end) #assigns ISS_period globally so it can be used outside of the function
start2<-paste(start) #have to paste start and end because otherwise, the data will be converted to the timezone of the machine when printed, or it will print a string of numbers that is, presumably, a representation of the time value rather than the actual value; something to do with lubridate maybe
end2<-paste(end)
t_timeframe<-c(start2,end2) #stores start and end time of temperature data analyzed)
}
#creating a separate function to avoid using <<- or assign()
ISS_period<-function(x,t,d){ #same input as TempStats_times(), creates subset of temperature data for the appropriate times
ISS<-read.csv(x) #same as part of TempStats_times(), separated to avoid globally defining ISS_period w/in it
ISS$time<-ymd_hms(ISS$time)
start<-ymd_hms(t)
end<-ymd_hms(start)+minutes(d)
ISS_period<-subset(ISS, time>start & time<end)
}
ISS_Stats<-function(c,t,s){ #x is variable for whole ISS, c is variable for chemistry times, t is variable for temp times, s is for sum_stats
x<-paste(t) #pastes temperature times because lubridate(?) is still doing *something* funky with times
y<-paste(c)
x<-c(y,x,s) #creates vector of data for a given site, in this order: chemical data start, chemical data end, temp data start, temp data end, mean, median, range, variance, st. dev, SEM
}
duration<-10
chem001<-"chemical_times_csv,1,'bullseye'"
chem_time<-chem_measure(chem001) #print chem start and end times; chemical_times_csv defined in {r variables called often}
#Bullseye
chem_time<-chem_measure(chemical_times_csv,1,'bullseye') #print chem start and end times; chemical_times_csv defined in {r variables called often}
start<-temp_start(chemical_times_csv,1,"bullseye") #isolate chemical start time, save as variable "start"
test_chem_duration(chemical_times_csv,1,"bullseye") #test if chemistry taken for <20 minutes
t_timeframe<-TempStats_times(ISS001,start,duration) #get temp start and end times
ISS_duration<-ISS_period(ISS001,start,duration) #subsets station data into table for just this time period
ISS_summary<-sum_stats_values(ISS_duration$temperature) #get summary statistics
ISS1_bullseye<-ISS_Stats(chem_time,t_timeframe,ISS_summary) #creates vector of the times and summary statistics for ISS1 Bullseye
site<-"ISS 001"
location<-"bullseye"
ISS1bull_duration<-cbind(ISS_duration,site,location) #columns of site and location, for cumulative boxplot
TempStats(ISS001,start,duration,"ISS001 Bullseye", "scatterplot")#calculates summary statistics, temperature timeframe given temperature start time and duration (determined by chem_measure() or input manually), and produces plot (bar or scatter) of temperature
boxplot(temperature~location,data=ISS1bull_duration, main="ISS 001 Bullseye", ylab="Temperature (C)") #boxplot of just ISS1 bullseye
#50cm Away
chem_time<-chem_measure(chemical_times_csv,1,"away")
start<-temp_start(chemical_times_csv,1,"away")
test_chem_duration(chemical_times_csv,1,"away")
t_timeframe<-TempStats_times(ISS001,start,duration)
ISS_duration<-ISS_period(ISS001,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
ISS1_away<-ISS_Stats(chem_time,t_timeframe,ISS_summary)
site<-"ISS 001"
location<-"away"
ISS1away_duration<-cbind(ISS_duration,site,location)
TempStats(ISS001,start,duration,"ISS1 0.50m Away from Bullseye","scatterplot")
boxplot(temperature~location,data=ISS1away_duration, main="ISS 001 Away", ylab="Temperature (C)")
#install.packages("lubridate")  #install lubridate, if not already present on the machine
library(lubridate)#load Lubridate
#library(devtools) #load devtools (only necessary if installing PescStats from GitHub)
#install_github("sbeaulieu/Pescadero/PescStats") #installs PescStats; not a bad idea to frequently re-install due to ongoing modifications of the package
library(PescStats) #load PescStats
library(ggplot2)
sum_stats_values<-function(x){   #variation of sum_stats() function in PescStats to return JUST the summary statistic values indicated below; original sum_stats() function prints these values with labels in the R console
decimal<-strsplit(as.character(x),"\\.")[[1]][2]
if(is.na(decimal))
digits <- 1 #sets up for rounding to 1 decimal place if original data is whole numbers
else
digits<-nchar(decimal)+1 #sets up for rounding to 1 more decimal place than in original data
min<-round(min(x, na.rm=T), digits=digits)
max<-round(max(x, na.rm=T), digits=digits)
mean<-round(mean(x, na.rm=T), digits=digits) #calculates mean of data, with NAs removed and rounding
med<-round(median(x, na.rm=T), digits=digits) #calculates median of data, with NAs removed and rounding
range<-round(max(x, na.rm=T)-min(x, na.rm=T), digits=digits) #calculates range of data, with NAs removed and rounding
var<-round(var(x, na.rm=T), digits=digits) #calculates variance of data, with NAs removed and rounding
sd<-round(sd(x, na.rm=T), digits=digits) #calculates standard devation of data, with NAs removed and rounding
SEM<-round(SEM(x),digits=digits) #calculates standard error of the mean of data, with NAs removed and roundign
ISS_summary<-c(max,min,mean,med,range,var,sd,SEM) #stores summary statistics
}
chem_measure<-function(x,y,z){ #catered to pulling chem data times from various versions of the same spreadsheet
all_ISS<-read.csv(x) #x is file name of this iteration of the sheet
this_ISS<-subset(all_ISS, all_ISS$Station==y) #y is station number (00#); subsets just the measurements from that station
this_locale<-subset(this_ISS,this_ISS$location==z) #z is location (bullseye, away, excavated_bullseye); subsets
start2<-as.character(this_locale$Chem_Data_Start_Text) #if not stored as character, when concatinating summary stats, temperature times, and chemical times together later, the chemical times are either appended or prefixed to every other variable rather than standing alone
end2<-as.character(this_locale$Chem_Data_End_Text)
chem_time<-c(start2,end2)
}
#making temp_start and duration separate functions to avoid using <<- or assign()
temp_start<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
#  if (length<10) initially used 10 min but then Scott told us about several minute lag for mass spec
start<-ymd_hms(chem_end)-minutes(20) #sets temp_start to 15min before the end of chemical measurements if chemistry taken for 15 minutes or more
#if (length<20)
# print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
#return warning if chemistry taken for less than 20 in
test_chem_duration<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text) #previously in chem_measure; chemical data start time as chem_start, and in a format usable by lubridate()
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text) #previously in chem_measure
interval<-interval(chem_start,chem_end) #sets interval for calculating length of time btwn start and end
length<-time_length(interval,unit="minutes") #calculates time difference, in min, btwn start end end
if (length<20)
print("chemistry measurement less than 20 minutes, watch video") #sets temp_start to start time of chemistry measurements if chemistry taken for less than 15min
#else
#    start<-ymd_hms(chem_end)-minutes(10) #sets temp_start to 10min before the end of chemical measurements if chemistry taken for 10 minutes or more
}
#temp now always 10 min, so this function is unncessary
#temp_duration<-function(x,y,z){ #same input as chem_measure() and temp_duration()
#  all_ISS<-read.csv(x) #through defining chem_end, identical to chem_measure() and temp_start(); originally these 3 were one function, but were separated to avoid defining variables globally within the function
#  this_ISS<-subset(all_ISS, all_ISS$Station==y)
#  this_locale<-subset(this_ISS,this_ISS$location==z)
#  chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text)
#  chem_end<-ymd_hms(this_locale$Chem_Data_End_Text)
#  interval<-interval(chem_start,chem_end)
#  length<-time_length(interval,unit="minutes")
#    if (length<10)
#      duration<-length #sets duration to entirety of chemical measurement if chemistry taken for less than 10 minutes
#    else
#      duration<-10 #sets duration to 10 minutes if more than 10 minutes of chemistry taken
#}
TempStats_times<-function(x,t,d){  #variation of TempStats() function in PescStats that outputs just the times that TempStats() uses
ISS<-read.csv(x) #x is actual temperature log
ISS$time<-ymd_hms(ISS$time) #assumes timestamps in "time" column are in year month day hour minute second format; from lubridate package
start<-ymd_hms(t) #t is the desired start time for temperature
end<-ymd_hms(start)+minutes(d) #d is the durration of the measurement
ISS_period<-subset(ISS, time>start & time<end) #assigns ISS_period globally so it can be used outside of the function
start2<-paste(start) #have to paste start and end because otherwise, the data will be converted to the timezone of the machine when printed, or it will print a string of numbers that is, presumably, a representation of the time value rather than the actual value; something to do with lubridate maybe
end2<-paste(end)
t_timeframe<-c(start2,end2) #stores start and end time of temperature data analyzed)
}
#creating a separate function to avoid using <<- or assign()
ISS_period<-function(x,t,d){ #same input as TempStats_times(), creates subset of temperature data for the appropriate times
ISS<-read.csv(x) #same as part of TempStats_times(), separated to avoid globally defining ISS_period w/in it
ISS$time<-ymd_hms(ISS$time)
start<-ymd_hms(t)
end<-ymd_hms(start)+minutes(d)
ISS_period<-subset(ISS, time>start & time<end)
}
ISS_Stats<-function(c,t,s){ #x is variable for whole ISS, c is variable for chemistry times, t is variable for temp times, s is for sum_stats
x<-paste(t) #pastes temperature times because lubridate(?) is still doing *something* funky with times
y<-paste(c)
x<-c(y,x,s) #creates vector of data for a given site, in this order: chemical data start, chemical data end, temp data start, temp data end, mean, median, range, variance, st. dev, SEM
}
#Bullseye
chem_time<-chem_measure(chemical_times_csv,1,'bullseye') #print chem start and end times; chemical_times_csv defined in {r variables called often}
start<-temp_start(chemical_times_csv,1,"bullseye") #isolate chemical start time, save as variable "start"
test_chem_duration(chemical_times_csv,1,"bullseye") #test if chemistry taken for <20 minutes
t_timeframe<-TempStats_times(ISS001,start,duration) #get temp start and end times
ISS_duration<-ISS_period(ISS001,start,duration) #subsets station data into table for just this time period
ISS_summary<-sum_stats_values(ISS_duration$temperature) #get summary statistics
ISS1_bullseye<-ISS_Stats(chem_time,t_timeframe,ISS_summary) #creates vector of the times and summary statistics for ISS1 Bullseye
site<-"ISS 001"
location<-"bullseye"
ISS1bull_duration<-cbind(ISS_duration,site,location) #columns of site and location, for cumulative boxplot
TempStats(ISS001,start,duration,"ISS001 Bullseye", "scatterplot")#calculates summary statistics, temperature timeframe given temperature start time and duration (determined by chem_measure() or input manually), and produces plot (bar or scatter) of temperature
boxplot(temperature~location,data=ISS1bull_duration, main="ISS 001 Bullseye", ylab="Temperature (C)") #boxplot of just ISS1 bullseye
#50cm Away
chem_time<-chem_measure(chemical_times_csv,1,"away")
start<-temp_start(chemical_times_csv,1,"away")
test_chem_duration(chemical_times_csv,1,"away")
t_timeframe<-TempStats_times(ISS001,start,duration)
ISS_duration<-ISS_period(ISS001,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
ISS1_away<-ISS_Stats(chem_time,t_timeframe,ISS_summary)
site<-"ISS 001"
location<-"away"
ISS1away_duration<-cbind(ISS_duration,site,location)
TempStats(ISS001,start,duration,"ISS1 0.50m Away from Bullseye","scatterplot")
boxplot(temperature~location,data=ISS1away_duration, main="ISS 001 Away", ylab="Temperature (C)")
test_chem_duration<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text)
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text)
interval<-interval(chem_start,chem_end)
length<-time_length(interval,unit="minutes")
if (length<20)
print("chemistry measurement less than 20 minutes, watch video")
else
print("chemistry measurement equal to greater than 20 minutes")
#temp now always 10 min, so this function is unncessary
#temp_duration<-function(x,y,z){ #same input as chem_measure() and temp_duration()
#  all_ISS<-read.csv(x) #through defining chem_end, identical to chem_measure() and temp_start(); originally these 3 were one function, but were separated to avoid defining variables globally within the function
#  this_ISS<-subset(all_ISS, all_ISS$Station==y)
#  this_locale<-subset(this_ISS,this_ISS$location==z)
#  chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text)
#  chem_end<-ymd_hms(this_locale$Chem_Data_End_Text)
#  interval<-interval(chem_start,chem_end)
#  length<-time_length(interval,unit="minutes")
#    if (length<10)
#      duration<-length #sets duration to entirety of chemical measurement if chemistry taken for less than 10 minutes
#    else
#      duration<-10 #sets duration to 10 minutes if more than 10 minutes of chemistry taken
#}
TempStats_times<-function(x,t,d){  #variation of TempStats() function in PescStats that outputs just the times that TempStats() uses
ISS<-read.csv(x) #x is actual temperature log
ISS$time<-ymd_hms(ISS$time) #assumes timestamps in "time" column are in year month day hour minute second format; from lubridate package
start<-ymd_hms(t) #t is the desired start time for temperature
end<-ymd_hms(start)+minutes(d) #d is the durration of the measurement
ISS_period<-subset(ISS, time>start & time<end) #assigns ISS_period globally so it can be used outside of the function
start2<-paste(start) #have to paste start and end because otherwise, the data will be converted to the timezone of the machine when printed, or it will print a string of numbers that is, presumably, a representation of the time value rather than the actual value; something to do with lubridate maybe
end2<-paste(end)
t_timeframe<-c(start2,end2) #stores start and end time of temperature data analyzed)
}
#creating a separate function to avoid using <<- or assign()
ISS_period<-function(x,t,d){ #same input as TempStats_times(), creates subset of temperature data for the appropriate times
ISS<-read.csv(x) #same as part of TempStats_times(), separated to avoid globally defining ISS_period w/in it
ISS$time<-ymd_hms(ISS$time)
start<-ymd_hms(t)
end<-ymd_hms(start)+minutes(d)
ISS_period<-subset(ISS, time>start & time<end)
}
ISS_Stats<-function(c,t,s){ #x is variable for whole ISS, c is variable for chemistry times, t is variable for temp times, s is for sum_stats
x<-paste(t) #pastes temperature times because lubridate(?) is still doing *something* funky with times
y<-paste(c)
x<-c(y,x,s) #creates vector of data for a given site, in this order: chemical data start, chemical data end, temp data start, temp data end, mean, median, range, variance, st. dev, SEM
}
test_chem_duration<-function(x,y,z){ #same input as chem_measure()
all_ISS<-read.csv(x) #these lines, through defining chem_end, are identical to chem_measure()
this_ISS<-subset(all_ISS, all_ISS$Station==y)
this_locale<-subset(this_ISS,this_ISS$location==z)
chem_start<-ymd_hms(this_locale$Chem_Data_Start_Text)
chem_end<-ymd_hms(this_locale$Chem_Data_End_Text)
interval<-interval(chem_start,chem_end)
length<-time_length(interval,unit="minutes")
if (length<20)
print("chemistry measurement less than 20 minutes, watch video")
else
print("chemistry measurement equal to greater than 20 minutes")
}
#Bullseye
chem_time<-chem_measure(chemical_times_csv,1,'bullseye') #print chem start and end times; chemical_times_csv defined in {r variables called often}
start<-temp_start(chemical_times_csv,1,"bullseye") #isolate chemical start time, save as variable "start"
test_chem_duration(chemical_times_csv,1,"bullseye") #test if chemistry taken for <20 minutes
t_timeframe<-TempStats_times(ISS001,start,duration) #get temp start and end times
ISS_duration<-ISS_period(ISS001,start,duration) #subsets station data into table for just this time period
ISS_summary<-sum_stats_values(ISS_duration$temperature) #get summary statistics
ISS1_bullseye<-ISS_Stats(chem_time,t_timeframe,ISS_summary) #creates vector of the times and summary statistics for ISS1 Bullseye
site<-"ISS 001"
location<-"bullseye"
ISS1bull_duration<-cbind(ISS_duration,site,location) #columns of site and location, for cumulative boxplot
TempStats(ISS001,start,duration,"ISS001 Bullseye", "scatterplot")#calculates summary statistics, temperature timeframe given temperature start time and duration (determined by chem_measure() or input manually), and produces plot (bar or scatter) of temperature
boxplot(temperature~location,data=ISS1bull_duration, main="ISS 001 Bullseye", ylab="Temperature (C)") #boxplot of just ISS1 bullseye
#50cm Away
chem_time<-chem_measure(chemical_times_csv,1,"away")
start<-temp_start(chemical_times_csv,1,"away")
test_chem_duration(chemical_times_csv,1,"away")
t_timeframe<-TempStats_times(ISS001,start,duration)
ISS_duration<-ISS_period(ISS001,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
ISS1_away<-ISS_Stats(chem_time,t_timeframe,ISS_summary)
site<-"ISS 001"
location<-"away"
ISS1away_duration<-cbind(ISS_duration,site,location)
TempStats(ISS001,start,duration,"ISS1 0.50m Away from Bullseye","scatterplot")
boxplot(temperature~location,data=ISS1away_duration, main="ISS 001 Away", ylab="Temperature (C)")
chem_time<-chem_measure(chemical_times_csv,1,'bullseye') #print chem start and end times; chemical_times_csv defined in {r variables called often}
start<-temp_start(chemical_times_csv,1,"bullseye") #isolate chemical start time, save as variable "start"
test_chem_duration(chemical_times_csv,1,"bullseye") #test if chemistry taken for <20 minutes
t_timeframe<-TempStats_times(ISS001,start,duration) #get temp start and end times
ISS_duration<-ISS_period(ISS001,start,duration) #subsets station data into table for just this time period
ISS_summary<-sum_stats_values(ISS_duration$temperature) #get summary statistics
ISS1_bullseye<-ISS_Stats(chem_time,t_timeframe,ISS_summary) #creates vector of the times and summary statistics for ISS1 Bullseye
site<-"ISS 001"
location<-"bullseye"
ISS1bull_duration<-cbind(ISS_duration,site,location) #columns of site and location, for cumulative boxplot
TempStats(ISS001,start,duration,"ISS001 Bullseye", "scatterplot")#calculates summary statistics, temperature timeframe given temperature start time and duration (determined by chem_measure() or input manually), and produces plot (bar or scatter) of temperature
boxplot(temperature~location,data=ISS1bull_duration, main="ISS 001 Bullseye", ylab="Temperature (C)") #boxplot of just ISS1 bullseye
#50cm Away
chem_time<-chem_measure(chemical_times_csv,1,"away")
start<-temp_start(chemical_times_csv,1,"away")
test_chem_duration(chemical_times_csv,1,"away")
t_timeframe<-TempStats_times(ISS001,start,duration)
ISS_duration<-ISS_period(ISS001,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
ISS1_away<-ISS_Stats(chem_time,t_timeframe,ISS_summary)
site<-"ISS 001"
location<-"away"
ISS1away_duration<-cbind(ISS_duration,site,location)
TempStats(ISS001,start,duration,"ISS1 0.50m Away from Bullseye","scatterplot")
boxplot(temperature~location,data=ISS1away_duration, main="ISS 001 Away", ylab="Temperature (C)")
#Bullseye
chem_time<-chem_measure(chemical_times_csv,2,"bullseye")
start<-temp_start(chemical_times_csv,2,"bullseye")
test_chem_duration(chemical_times_csv,2,"bullseye")
t_timeframe<-TempStats_times(ISS002,start,duration)
ISS_duration<-ISS_period(ISS002,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
ISS2_bullseye<-ISS_Stats(chem_time,t_timeframe,ISS_summary)
site<-"ISS 002"
location<-"bullseye"
ISS2bull_duration<-cbind(ISS_duration,site,location)
TempStats(ISS002,start,duration,"ISS002 Bullseye", "scatterplot")
boxplot(temperature~location,data=ISS2bull_duration, main="ISS 002 Bullseye", ylab="Temperature (C)")
#50cm Away
chem_time<-chem_measure(chemical_times_csv, 2,"away")
start<-temp_start(chemical_times_csv,2,"away") #we think we need 10 min earlier
#start<-"2017-10-31 21:40:00"  #set temp start
test_chem_duration(chemical_times_csv,2,"away")
t_timeframe<-TempStats_times(ISS002,start,duration)
ISS_duration<-ISS_period(ISS002,start,duration)
ISS_summary<-sum_stats_values(ISS_duration$temperature)
ISS2_away<-ISS_Stats(chem_time,t_timeframe,ISS_summary)
site<-"ISS 002"
location<-"away"
ISS2away_duration<-cbind(ISS_duration,site,location)
TempStats(ISS002,start,duration,"ISS2 0.50m Away from Bullseye","scatterplot")
boxplot(temperature~location,data=ISS2away_duration, main="ISS 002 Away", ylab="Temperature (C)")
source('~/.active-rstudio-document', echo=TRUE)
